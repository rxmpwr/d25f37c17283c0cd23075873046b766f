"""
Analysis tab for displaying comprehensive YouTube analysis results
Complete Vietnamese version - Ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát
"""

import customtkinter as ctk
from typing import Dict, Optional, Callable
import json
from datetime import datetime
import threading
from tkinter import messagebox, filedialog
import os
import glob

class AnalysisTabManager:
    def __init__(self, parent_frame: ctk.CTkFrame, export_json_callback: Callable, 
                 export_csv_callback: Callable, create_prompts_callback: Callable):
        self.parent_frame = parent_frame
        self.export_json_callback = export_json_callback
        self.export_csv_callback = export_csv_callback
        self.create_prompts_callback = create_prompts_callback
        
        # Create main container
        self.container = ctk.CTkFrame(parent_frame, fg_color="white")
        
        # Variables
        self.analysis_data = None
        self.additional_requirements = ""
        
        # Setup UI
        self.setup_ui()
        
    def setup_ui(self):
        """Setup the analysis tab UI."""
        # Title with animation
        
        subtitle_label = ctk.CTkLabel(
            self.container,
            text="Ph√¢n t√≠ch th·ªùi gian th·ª±c n·ªôi dung YouTube v·ªõi insights viral (T·ªëi ∆∞u hi·ªáu su·∫•t)",
            font=ctk.CTkFont(size=14),
            text_color="#666666"
        )
        subtitle_label.pack(pady=(0, 20))
        
        # Progress section (initially shown)
        self.progress_frame = ctk.CTkFrame(self.container, fg_color="#F8F9FA", corner_radius=12)
        self.progress_frame.pack(fill="both", expand=True, padx=30, pady=20)
        
        # Progress content with better styling
        progress_title = ctk.CTkLabel(
            self.progress_frame,
            text="üîÑ ƒêang Ph√¢n T√≠ch D·ªØ Li·ªáu YouTube...",
            font=ctk.CTkFont(size=22, weight="bold"),
            text_color="#2196F3"
        )
        progress_title.pack(pady=(40, 15))
        
        progress_desc = ctk.CTkLabel(
            self.progress_frame,
            text="ƒêang x·ª≠ l√Ω video YouTube, b√¨nh lu·∫≠n, ph·ª• ƒë·ªÅ v√† t·∫°o AI insights...",
            font=ctk.CTkFont(size=15),
            text_color="#555555",
            wraplength=600
        )
        progress_desc.pack(pady=(0, 25))
        
        # Enhanced progress bar
        self.progress_bar = ctk.CTkProgressBar(
            self.progress_frame,
            width=700,
            height=24,
            progress_color="#4CAF50",
            corner_radius=12
        )
        self.progress_bar.pack(pady=15)
        self.progress_bar.set(0)
        
        # Progress details in grid
        self.progress_details_frame = ctk.CTkFrame(self.progress_frame, fg_color="transparent")
        self.progress_details_frame.pack(pady=25)
        
        # Progress labels with icons
        self.time_label = ctk.CTkLabel(
            self.progress_details_frame,
            text="‚è±Ô∏è Th·ªùi gian ƒë√£ qua: 0:00",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#424242"
        )
        self.time_label.grid(row=0, column=0, padx=25, pady=8)
        
        self.videos_label = ctk.CTkLabel(
            self.progress_details_frame,
            text="üìπ Video ƒë√£ ph√¢n t√≠ch: 0",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#424242"
        )
        self.videos_label.grid(row=0, column=1, padx=25, pady=8)
        
        self.comments_label = ctk.CTkLabel(
            self.progress_details_frame,
            text="üí¨ B√¨nh lu·∫≠n ƒë√£ thu th·∫≠p: 0",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#424242"
        )
        self.comments_label.grid(row=1, column=0, padx=25, pady=8)
        
        self.transcripts_label = ctk.CTkLabel(
            self.progress_details_frame,
            text="üìÑ Ph·ª• ƒë·ªÅ ƒë√£ tr√≠ch xu·∫•t: 0",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#424242"
        )
        self.transcripts_label.grid(row=1, column=1, padx=25, pady=8)
        
        # Current task with better styling
        self.task_label = ctk.CTkLabel(
            self.progress_frame,
            text="üéØ T√°c v·ª• hi·ªán t·∫°i: ƒêang kh·ªüi t·∫°o...",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#1976D2"
        )
        self.task_label.pack(pady=(20, 40))
        
        # Results section (initially hidden)
        self.results_frame = ctk.CTkFrame(self.container, fg_color="white")
        
        # Create scrollable frame for results
        self.scrollable_frame = ctk.CTkScrollableFrame(
            self.results_frame,
            fg_color="white",
            scrollbar_button_color="#E0E0E0",
            scrollbar_button_hover_color="#CCCCCC"
        )
        self.scrollable_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
    def show_results(self, analysis_data: Dict):
        """Display comprehensive analysis results."""
        print(f"DEBUG show_results - analysis_data keys: {analysis_data.keys()}")
        print(f"DEBUG show_results - analysis_type: {analysis_data.get('analysis_type')}")
        
        self.analysis_data = analysis_data
        
        # Auto-save results to JSON file
        self._auto_save_results(analysis_data)
        
        # Hide progress, show results
        self.progress_frame.pack_forget()
        self.results_frame.pack(fill="both", expand=True)
        
        # Clear scrollable frame
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        
        # Create comprehensive results display
        self._create_comprehensive_results(analysis_data)
            
    def _auto_save_results(self, analysis_data: Dict):
        """Auto-save analysis results to JSON file."""
        try:
            # Create output directory if not exists
            os.makedirs("output/analysis", exist_ok=True)
            
            # Generate filename with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"output/analysis/youtube_analysis_{timestamp}.json"
            
            # Prepare data for saving
            save_data = {
                'saved_at': datetime.now().isoformat(),
                'analysis_results': analysis_data,
                'app_version': '2.0',
                'file_type': 'youtube_analysis'
            }
            
            # Save to file
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ Analysis results auto-saved to: {filename}")
            
            # Show notification in UI
            self._show_save_notification(filename)
            
        except Exception as e:
            print(f"‚ùå Error auto-saving results: {e}")
    
    def _show_save_notification(self, filename: str):
        """Show save notification in UI."""
        # Add a small notification at the top of results
        notification_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#E8F5E9", corner_radius=8)
        notification_frame.pack(fill="x", padx=20, pady=(0, 10))
        
        notification_label = ctk.CTkLabel(
            notification_frame,
            text=f"üíæ K·∫øt qu·∫£ ƒë√£ t·ª± ƒë·ªông l∆∞u v√†o: {os.path.basename(filename)}",
            font=ctk.CTkFont(size=12),
            text_color="#2E7D32"
        )
        notification_label.pack(pady=8)
        
    def _create_comprehensive_results(self, analysis_data: Dict):
        """Create comprehensive results display with all sections."""
        
        # Get data - handle both structured and dynamic analysis
        if analysis_data.get('analysis_type') == 'dynamic':
            raw_data = analysis_data.get('raw_data', {})
            ai_response = analysis_data.get('ai_response', '')
        else:
            raw_data = analysis_data.get('data', analysis_data)
            ai_response = None
        
        videos = raw_data.get('video', [])
        comments = raw_data.get('b√¨nh lu·∫≠n', [])
        transcripts = raw_data.get('transcripts', [])
        channels = raw_data.get('channels', [])
        viral_score = analysis_data.get('viral_score', raw_data.get('viral_score', 0))
        
        # 1. SUCCESS HEADER
        self._create_success_header(viral_score)
        
        # 2. EXECUTIVE SUMMARY
        self._create_executive_summary(videos, comments, transcripts, viral_score, channels)
        
        # 3. KEY PERFORMANCE METRICS
        self._create_performance_metrics(videos, comments)
        
        # 4. TOP PERFORMING CONTENT
        self._create_top_content_section(videos)
        
        # 5. AUDIENCE INSIGHTS
        self._create_audience_insights(comments, videos)
        
        # 6. CONTENT ANALYSIS
        self._create_content_analysis(transcripts, videos)
        
        # 7. AI INSIGHTS (if available)
        if ai_response:
            self._create_ai_insights_section(ai_response)
            
        # 8. VIRAL POTENTIAL ANALYSIS
        self._create_viral_analysis(viral_score, videos)
        
        # 9. STRENGTHS & OPPORTUNITIES
        self._create_strengths_opportunities(videos, comments, viral_score)
        
        # 10. ACTIONABLE RECOMMENDATIONS
        self._create_recommendations(videos, comments, viral_score)
        
        # 11. DETAILED VIDEO BREAKDOWN
        self._create_detailed_breakdown(videos, comments, transcripts)
        
        # 12. ADDITIONAL REQUIREMENTS
        self._create_additional_requirements()
        
        # 13. ACTION BUTTONS (Modified)
        self._create_action_buttons()
        
    def _create_success_header(self, viral_score: float):
        """Create success header with viral score."""
        header_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#E8F5E9", corner_radius=15)
        header_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        # Success icon and title
        success_title = ctk.CTkLabel(
            header_frame,
            text="‚úÖ Ph√¢n T√≠ch Ho√†n T·∫•t!",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#2E7D32"
        )
        success_title.pack(pady=(20, 10))
        
        # Viral score display
        if viral_score >= 70:
            score_color = "#4CAF50"
            score_emoji = "üî•"
            score_text = "Ti·ªÅm NƒÉng Viral Cao!"
        elif viral_score >= 50:
            score_color = "#FF9800"
            score_emoji = "üìà"
            score_text = "Ti·ªÅm NƒÉng TƒÉng Tr∆∞·ªüng T·ªët"
        else:
            score_color = "#F44336"
            score_emoji = "üí°"
            score_text = "C∆° H·ªôi C·∫£i Thi·ªán"
        
        score_frame = ctk.CTkFrame(header_frame, fg_color="white", corner_radius=10)
        score_frame.pack(padx=30, pady=(0, 20))
        
        score_label = ctk.CTkLabel(
            score_frame,
            text=f"{score_emoji} ƒêi·ªÉm Viral: {viral_score:.1f}/100",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=score_color
        )
        score_label.pack(pady=15)
        
        score_desc = ctk.CTkLabel(
            score_frame,
            text=score_text,
            font=ctk.CTkFont(size=14),
            text_color="#666666"
        )
        score_desc.pack(pady=(0, 15))
        
    def _create_executive_summary(self, videos: list, comments: list, transcripts: list, viral_score: float, channels: list):
        """Create executive summary section."""
        summary_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#F3E5F5", corner_radius=15)
        summary_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        summary_title = ctk.CTkLabel(
            summary_frame,
            text="üìä T√ìM T·∫ÆT ƒêI·ªÄU H√ÄNH",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#7B1FA2"
        )
        summary_title.pack(pady=(20, 15))
        
        # Summary stats in grid
        stats_frame = ctk.CTkFrame(summary_frame, fg_color="white", corner_radius=10)
        stats_frame.pack(fill="x", padx=25, pady=(0, 20))
        
        # Calculate summary metrics
        total_views = sum(v.get('view_count', 0) for v in videos)
        total_likes = sum(v.get('like_count', 0) for v in videos)
        total_video_comments = sum(v.get('comment_count', 0) for v in videos)
        avg_views = total_views / len(videos) if videos else 0
        avg_engagement = sum((v.get('like_count', 0) + v.get('comment_count', 0)) / v.get('view_count', 1) * 100 
                           for v in videos if v.get('view_count', 0) > 0) / len(videos) if videos else 0
        
        # Channel info
        channel_names = list(set(v.get('channel_title', 'Kh√¥ng r√µ') for v in videos if v.get('channel_title')))
        channels_text = ", ".join(channel_names[:3])
        if len(channel_names) > 3:
            channels_text += f" v√† {len(channel_names) - 3} k√™nh kh√°c"
        
        summary_stats = [
            ("üé¨ K√™nh ƒê√£ Ph√¢n T√≠ch", channels_text or "Kh√¥ng c√≥"),
            ("üìπ T·ªïng S·ªë Video", f"{len(videos):,}"),
            ("üëÅÔ∏è T·ªïng L∆∞·ª£t Xem", f"{total_views:,}"),
            ("‚ù§Ô∏è T·ªïng L∆∞·ª£t Th√≠ch", f"{total_likes:,}"),
            ("üí¨ B√¨nh Lu·∫≠n ƒê√£ Thu Th·∫≠p", f"{len(comments):,}"),
            ("üìÑ Ph·ª• ƒê·ªÅ ƒê√£ Tr√≠ch Xu·∫•t", f"{len(transcripts):,}"),
            ("üìä Trung B√¨nh L∆∞·ª£t Xem/Video", f"{avg_views:,.0f}"),
            ("üéØ T·ª∑ L·ªá T∆∞∆°ng T√°c Trung B√¨nh", f"{avg_engagement:.2f}%"),
        ]
        
        # Display in 2x4 grid
        for i, (label, value) in enumerate(summary_stats):
            row = i // 2
            col = i % 2
            
            stat_frame = ctk.CTkFrame(stats_frame, fg_color="transparent")
            stat_frame.grid(row=row, column=col, padx=20, pady=10, sticky="w")
            
            label_widget = ctk.CTkLabel(
                stat_frame,
                text=label + ":",
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color="#424242"
            )
            label_widget.pack(side="left", padx=(0, 10))
            
            value_widget = ctk.CTkLabel(
                stat_frame,
                text=value,
                font=ctk.CTkFont(size=14),
                text_color="#1976D2"
            )
            value_widget.pack(side="left")
        
    def _create_performance_metrics(self, videos: list, comments: list):
        """Create performance metrics section."""
        metrics_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#E3F2FD", corner_radius=15)
        metrics_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        metrics_title = ctk.CTkLabel(
            metrics_frame,
            text="üìà CH·ªà S·ªê HI·ªÜU SU·∫§T CH√çNH",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#1565C0"
        )
        metrics_title.pack(pady=(20, 15))
        
        if not videos:
            no_data_label = ctk.CTkLabel(
                metrics_frame,
                text="Kh√¥ng c√≥ d·ªØ li·ªáu video ƒë·ªÉ t√≠nh to√°n ch·ªâ s·ªë",
                font=ctk.CTkFont(size=14),
                text_color="#666666"
            )
            no_data_label.pack(pady=20)
            return
        
        # Calculate advanced metrics
        view_counts = [v.get('view_count', 0) for v in videos]
        engagement_rates = []
        
        for video in videos:
            views = video.get('view_count', 0)
            if views > 0:
                engagement = ((video.get('like_count', 0) + video.get('comment_count', 0)) / views) * 100
                engagement_rates.append(engagement)
        
        # Metrics calculations
        max_views = max(view_counts) if view_counts else 0
        min_views = min(view_counts) if view_counts else 0
        median_views = sorted(view_counts)[len(view_counts)//2] if view_counts else 0
        avg_engagement = sum(engagement_rates) / len(engagement_rates) if engagement_rates else 0
        max_engagement = max(engagement_rates) if engagement_rates else 0
        
        # High performers
        high_performers = [v for v in videos if v.get('view_count', 0) > median_views * 1.5]
        viral_videos = [v for v in videos if v.get('view_count', 0) > max_views * 0.8]
        
        metrics_content = ctk.CTkFrame(metrics_frame, fg_color="white", corner_radius=10)
        metrics_content.pack(fill="x", padx=25, pady=(0, 20))
        
        metrics_data = [
            ("üìä Ph√¢n Ph·ªëi Hi·ªáu Su·∫•t", ""),
            ("   ‚Ä¢ L∆∞·ª£t Xem Cao Nh·∫•t", f"{max_views:,}"),
            ("   ‚Ä¢ L∆∞·ª£t Xem Trung V·ªã", f"{median_views:,}"),
            ("   ‚Ä¢ L∆∞·ª£t Xem Th·∫•p Nh·∫•t", f"{min_views:,}"),
            ("", ""),
            ("üéØ Ph√¢n T√≠ch T∆∞∆°ng T√°c", ""),
            ("   ‚Ä¢ T∆∞∆°ng T√°c Trung B√¨nh", f"{avg_engagement:.2f}%"),
            ("   ‚Ä¢ T∆∞∆°ng T√°c ƒê·ªânh", f"{max_engagement:.2f}%"),
            ("   ‚Ä¢ Video Hi·ªáu Su·∫•t Cao", f"{len(high_performers)} video"),
            ("   ‚Ä¢ ·ª®ng Vi√™n Viral", f"{len(viral_videos)} video"),
        ]
        
        for label, value in metrics_data:
            if not label:  # Spacer
                ctk.CTkLabel(metrics_content, text="", height=5).pack()
                continue
                
            metric_frame = ctk.CTkFrame(metrics_content, fg_color="transparent")
            metric_frame.pack(fill="x", padx=20, pady=3)
            
            if not value:  # Section header
                header_label = ctk.CTkLabel(
                    metric_frame,
                    text=label,
                    font=ctk.CTkFont(size=15, weight="bold"),
                    text_color="#1565C0"
                )
                header_label.pack(anchor="w")
            else:
                metric_label = ctk.CTkLabel(
                    metric_frame,
                    text=f"{label}: {value}",
                    font=ctk.CTkFont(size=13),
                    text_color="#424242"
                )
                metric_label.pack(anchor="w")
        
    def _create_top_content_section(self, videos: list):
        """Create top performing content section."""
        top_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#FFF3E0", corner_radius=15)
        top_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        top_title = ctk.CTkLabel(
            top_frame,
            text="üèÜ N·ªòI DUNG HI·ªÜU SU·∫§T CAO NH·∫§T",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#E65100"
        )
        top_title.pack(pady=(20, 15))
        
        if not videos:
            return
        
        # Sort videos by views
        sorted_videos = sorted(videos, key=lambda x: x.get('view_count', 0), reverse=True)
        top_videos = sorted_videos[:5]  # Show top 5
        
        for i, video in enumerate(top_videos, 1):
            video_frame = ctk.CTkFrame(top_frame, fg_color="white", corner_radius=10)
            video_frame.pack(fill="x", padx=25, pady=8)
            
            # Video header
            header_frame = ctk.CTkFrame(video_frame, fg_color="transparent")
            header_frame.pack(fill="x", padx=15, pady=(10, 5))
            
            rank_label = ctk.CTkLabel(
                header_frame,
                text=f"#{i}",
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#FF6B35",
                width=40
            )
            rank_label.pack(side="left")
            
            title_label = ctk.CTkLabel(
                header_frame,
                text=video.get('title', 'Kh√¥ng c√≥')[:80] + ("..." if len(video.get('title', '')) > 80 else ""),
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color="#212121",
                anchor="w"
            )
            title_label.pack(side="left", fill="x", expand=True, padx=(10, 0))
            
            # Metrics
            metrics_frame = ctk.CTkFrame(video_frame, fg_color="transparent")
            metrics_frame.pack(fill="x", padx=15, pady=(0, 10))
            
            views = video.get('view_count', 0)
            likes = video.get('like_count', 0)
            comments = video.get('comment_count', 0)
            engagement = ((likes + comments) / views * 100) if views > 0 else 0
            
            metrics_text = f"üëÅÔ∏è {views:,} l∆∞·ª£t xem  ‚Ä¢  ‚ù§Ô∏è {likes:,} th√≠ch  ‚Ä¢  üí¨ {comments:,} b√¨nh lu·∫≠n  ‚Ä¢  üìä {engagement:.2f}% t∆∞∆°ng t√°c"
            
            metrics_label = ctk.CTkLabel(
                metrics_frame,
                text=metrics_text,
                font=ctk.CTkFont(size=12),
                text_color="#666666"
            )
            metrics_label.pack(anchor="w", padx=35)
    
    def _create_audience_insights(self, comments: list, videos: list):
        """Create audience insights section."""
        audience_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#E8F5E9", corner_radius=15)
        audience_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        audience_title = ctk.CTkLabel(
            audience_frame,
            text="üë• INSIGHTS KH√ÅN GI·∫¢",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#2E7D32"
        )
        audience_title.pack(pady=(20, 15))
        
        insights_content = ctk.CTkFrame(audience_frame, fg_color="white", corner_radius=10)
        insights_content.pack(fill="x", padx=25, pady=(0, 20))
        
        if not comments:
            no_comments_label = ctk.CTkLabel(
                insights_content,
                text="Kh√¥ng c√≥ b√¨nh lu·∫≠n ƒë·ªÉ ph√¢n t√≠ch kh√°n gi·∫£",
                font=ctk.CTkFont(size=14),
                text_color="#666666"
            )
            no_comments_label.pack(pady=20)
            return
        
        # Sentiment analysis - Vietnamese keywords
        positive_keywords = ['th√≠ch', 'tuy·ªát v·ªùi', 'hay', 't·ªët', 'xu·∫•t s·∫Øc', 'c·∫£m ∆°n', 'love', 'great', 'amazing', 'awesome', 'helpful', 'thank', 'best', 'perfect']
        negative_keywords = ['gh√©t', 't·ªá', 'd·ªü', 'ch√°n', 'kh√¥ng hay', 'hate', 'bad', 'terrible', 'worst', 'boring', 'useless']
        
        positive_count = sum(1 for c in comments if any(word in c.get('text', '').lower() for word in positive_keywords))
        negative_count = sum(1 for c in comments if any(word in c.get('text', '').lower() for word in negative_keywords))
        
        total_comments = len(comments)
        positive_pct = (positive_count / total_comments * 100) if total_comments > 0 else 0
        negative_pct = (negative_count / total_comments * 100) if total_comments > 0 else 0
        
        # Top comments by likes
        top_comments = sorted(comments, key=lambda x: x.get('like_count', 0), reverse=True)[:3]
        
        audience_insights = [
            ("üìä Ph√¢n T√≠ch C·∫£m X√∫c", ""),
            ("   ‚Ä¢ B√¨nh Lu·∫≠n T√≠ch C·ª±c", f"{positive_count} ({positive_pct:.1f}%)"),
            ("   ‚Ä¢ B√¨nh Lu·∫≠n Ti√™u C·ª±c", f"{negative_count} ({negative_pct:.1f}%)"),
            ("", ""),
            ("üí¨ B√¨nh Lu·∫≠n H√†ng ƒê·∫ßu Theo T∆∞∆°ng T√°c", ""),
        ]
        
        # Add insights to UI
        for label, value in audience_insights:
            if not label:
                ctk.CTkLabel(insights_content, text="", height=5).pack()
                continue
                
            insight_frame = ctk.CTkFrame(insights_content, fg_color="transparent")
            insight_frame.pack(fill="x", padx=20, pady=3)
            
            if not value:
                header_label = ctk.CTkLabel(
                    insight_frame,
                    text=label,
                    font=ctk.CTkFont(size=15, weight="bold"),
                    text_color="#2E7D32"
                )
                header_label.pack(anchor="w")
            else:
                insight_label = ctk.CTkLabel(
                    insight_frame,
                    text=f"{label}: {value}",
                    font=ctk.CTkFont(size=13),
                    text_color="#424242"
                )
                insight_label.pack(anchor="w")
        
        # Show top comments
        for i, comment in enumerate(top_comments, 1):
            comment_frame = ctk.CTkFrame(insights_content, fg_color="#F5F5F5", corner_radius=8)
            comment_frame.pack(fill="x", padx=20, pady=5)
            
            comment_text = comment.get('text', '')[:100] + ("..." if len(comment.get('text', '')) > 100 else "")
            comment_likes = comment.get('like_count', 0)
            
            comment_label = ctk.CTkLabel(
                comment_frame,
                text=f"{i}. \"{comment_text}\" ({comment_likes} th√≠ch)",
                font=ctk.CTkFont(size=12),
                text_color="#333333",
                wraplength=600,
                justify="left"
            )
            comment_label.pack(padx=15, pady=8, anchor="w")
    
    def _create_content_analysis(self, transcripts: list, videos: list):
        """Create content analysis section."""
        content_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#F3E5F5", corner_radius=15)
        content_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        content_title = ctk.CTkLabel(
            content_frame,
            text="üìù PH√ÇN T√çCH N·ªòI DUNG",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#7B1FA2"
        )
        content_title.pack(pady=(20, 15))
        
        analysis_content = ctk.CTkFrame(content_frame, fg_color="white", corner_radius=10)
        analysis_content.pack(fill="x", padx=25, pady=(0, 20))
        
        if not transcripts and not videos:
            no_content_label = ctk.CTkLabel(
                analysis_content,
                text="Kh√¥ng c√≥ d·ªØ li·ªáu n·ªôi dung ƒë·ªÉ ph√¢n t√≠ch",
                font=ctk.CTkFont(size=14),
                text_color="#666666"
            )
            no_content_label.pack(pady=20)
            return
        
        # Duration analysis
        durations = []
        for video in videos:
            duration_str = video.get('duration', '')
            if duration_str and ':' in duration_str:
                try:
                    if duration_str.count(':') == 1:  # MM:SS
                        minutes, seconds = map(int, duration_str.split(':'))
                        total_seconds = minutes * 60 + seconds
                    else:  # HH:MM:SS or PT format
                        if duration_str.startswith('PT'):
                            # Skip PT format parsing for now
                            continue
                        parts = list(map(int, duration_str.split(':')))
                        total_seconds = parts[0] * 3600 + parts[1] * 60 + parts[2]
                    durations.append(total_seconds)
                except:
                    pass
        
        # Language analysis from transcripts
        languages = {}
        total_transcript_words = 0
        
        for transcript in transcripts:
            lang = transcript.get('language', 'kh√¥ng r√µ')
            languages[lang] = languages.get(lang, 0) + 1
            
            text = transcript.get('full_text', '')
            word_count = len(text.split()) if text else 0
            total_transcript_words += word_count
        
        # Content insights
        avg_duration = sum(durations) / len(durations) if durations else 0
        avg_duration_min = avg_duration / 60
        
        content_insights = [
            ("‚è±Ô∏è Ph√¢n T√≠ch Th·ªùi L∆∞·ª£ng", ""),
            ("   ‚Ä¢ Th·ªùi L∆∞·ª£ng Trung B√¨nh", f"{avg_duration_min:.1f} ph√∫t"),
            ("   ‚Ä¢ T·ªïng Video C√≥ Th·ªùi L∆∞·ª£ng", f"{len(durations)}"),
            ("", ""),
            ("üó£Ô∏è Ph√¢n T√≠ch Ng√¥n Ng·ªØ & Ph·ª• ƒê·ªÅ", ""),
            ("   ‚Ä¢ Video C√≥ Ph·ª• ƒê·ªÅ", f"{len(transcripts)}"),
            ("   ‚Ä¢ T·ªïng T·ª´ ƒê√£ Ph√¢n T√≠ch", f"{total_transcript_words:,}"),
        ]
        
        # Display content insights
        for label, value in content_insights:
            if not label:
                ctk.CTkLabel(analysis_content, text="", height=5).pack()
                continue
                
            insight_frame = ctk.CTkFrame(analysis_content, fg_color="transparent")
            insight_frame.pack(fill="x", padx=20, pady=3)
            
            if not value:
                header_label = ctk.CTkLabel(
                    insight_frame,
                    text=label,
                    font=ctk.CTkFont(size=15, weight="bold"),
                    text_color="#7B1FA2"
                )
                header_label.pack(anchor="w")
            else:
                insight_label = ctk.CTkLabel(
                    insight_frame,
                    text=f"{label}: {value}",
                    font=ctk.CTkFont(size=13),
                    text_color="#424242"
                )
                insight_label.pack(anchor="w")
    
    def _create_ai_insights_section(self, ai_response: str):
        """Create AI insights section for dynamic analysis."""
        ai_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#E1F5FE", corner_radius=15)
        ai_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        ai_title = ctk.CTkLabel(
            ai_frame,
            text="ü§ñ AI INSIGHTS & PH√ÇN T√çCH",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#0277BD"
        )
        ai_title.pack(pady=(20, 15))
        
        # AI response display
        ai_text_frame = ctk.CTkFrame(ai_frame, fg_color="white", corner_radius=10)
        ai_text_frame.pack(fill="x", padx=25, pady=(0, 20))
        
        ai_textbox = ctk.CTkTextbox(
            ai_text_frame,
            height=300,
            font=ctk.CTkFont(size=14),
            fg_color="#FAFAFA",
            text_color="#212121",
            wrap="word"
        )
        ai_textbox.pack(fill="both", expand=True, padx=15, pady=15)
        ai_textbox.insert("1.0", ai_response)
        ai_textbox.configure(state="disabled")
    
    def _create_viral_analysis(self, viral_score: float, videos: list):
        """Create viral potential analysis section."""
        viral_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#FFF8E1", corner_radius=15)
        viral_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        viral_title = ctk.CTkLabel(
            viral_frame,
            text="üî• PH√ÇN T√çCH TI·ªÄM NƒÇNG VIRAL",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#F57F17"
        )
        viral_title.pack(pady=(20, 15))
        
        viral_content = ctk.CTkFrame(viral_frame, fg_color="white", corner_radius=10)
        viral_content.pack(fill="x", padx=25, pady=(0, 20))
        
        # Viral score breakdown
        score_breakdown = self._calculate_viral_breakdown(viral_score, videos)
        
        viral_insights = [
            ("üìä ƒêi·ªÉm Viral T·ªïng Th·ªÉ", f"{viral_score:.1f}/100"),
            ("", ""),
            ("üéØ Ph√¢n T√≠ch ƒêi·ªÉm S·ªë", ""),
            ("   ‚Ä¢ Ch·∫•t L∆∞·ª£ng N·ªôi Dung", f"{score_breakdown['content']:.1f}/25"),
            ("   ‚Ä¢ T·ª∑ L·ªá T∆∞∆°ng T√°c", f"{score_breakdown['t∆∞∆°ng t√°c']:.1f}/25"),
            ("   ‚Ä¢ Ti·ªÅm NƒÉng TƒÉng Tr∆∞·ªüng", f"{score_breakdown['growth']:.1f}/25"),
            ("   ‚Ä¢ S·ª©c H·∫•p D·∫´n Kh√°n Gi·∫£", f"{score_breakdown['appeal']:.1f}/25"),
        ]
        
        # Display viral insights
        for label, value in viral_insights:
            if not label:
                ctk.CTkLabel(viral_content, text="", height=5).pack()
                continue
                
            insight_frame = ctk.CTkFrame(viral_content, fg_color="transparent")
            insight_frame.pack(fill="x", padx=20, pady=3)
            
            if not value:
                header_label = ctk.CTkLabel(
                    insight_frame,
                    text=label,
                    font=ctk.CTkFont(size=15, weight="bold"),
                    text_color="#F57F17"
                )
                header_label.pack(anchor="w")
            else:
                insight_label = ctk.CTkLabel(
                    insight_frame,
                    text=f"{label}: {value}",
                    font=ctk.CTkFont(size=13),
                    text_color="#424242"
                )
                insight_label.pack(anchor="w")
    
    def _calculate_viral_breakdown(self, viral_score: float, videos: list) -> dict:
        """Calculate breakdown of viral score components."""
        # Simple breakdown - in real implementation, this would use the actual algorithm
        content_score = min(viral_score * 0.3, 25)
        engagement_score = min(viral_score * 0.25, 25)
        growth_score = min(viral_score * 0.25, 25)
        appeal_score = min(viral_score * 0.2, 25)
        
        return {
            'content': content_score,
            't∆∞∆°ng t√°c': engagement_score,
            'growth': growth_score,
            'appeal': appeal_score
        }
    
    def _create_strengths_opportunities(self, videos: list, comments: list, viral_score: float):
        """Create strengths and opportunities section."""
        so_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#E8EAF6", corner_radius=15)
        so_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        so_title = ctk.CTkLabel(
            so_frame,
            text="‚ö° ƒêI·ªÇM M·∫†NH & C∆† H·ªòI",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#3F51B5"
        )
        so_title.pack(pady=(20, 15))
        
        # Create two columns
        columns_frame = ctk.CTkFrame(so_frame, fg_color="transparent")
        columns_frame.pack(fill="x", padx=25, pady=(0, 20))
        
        # Strengths column
        strengths_frame = ctk.CTkFrame(columns_frame, fg_color="#E8F5E9", corner_radius=10)
        strengths_frame.pack(side="left", fill="both", expand=True, padx=(0, 10))
        
        strengths_title = ctk.CTkLabel(
            strengths_frame,
            text="üí™ ƒêI·ªÇM M·∫†NH",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#2E7D32"
        )
        strengths_title.pack(pady=(15, 10))
        
        # Calculate strengths
        strengths = self._identify_strengths(videos, comments, viral_score)
        for strength in strengths:
            strength_label = ctk.CTkLabel(
                strengths_frame,
                text=f"‚úÖ {strength}",
                font=ctk.CTkFont(size=13),
                text_color="#424242",
                wraplength=250,
                justify="left"
            )
            strength_label.pack(anchor="w", padx=15, pady=3)
        
        ctk.CTkLabel(strengths_frame, text="", height=10).pack()
        
        # Opportunities column
        opportunities_frame = ctk.CTkFrame(columns_frame, fg_color="#FFF3E0", corner_radius=10)
        opportunities_frame.pack(side="right", fill="both", expand=True, padx=(10, 0))
        
        opportunities_title = ctk.CTkLabel(
            opportunities_frame,
            text="üéØ C∆† H·ªòI",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#E65100"
        )
        opportunities_title.pack(pady=(15, 10))
        
        # Calculate opportunities
        opportunities = self._identify_opportunities(videos, comments, viral_score)
        for opportunity in opportunities:
            opportunity_label = ctk.CTkLabel(
                opportunities_frame,
                text=f"üî∏ {opportunity}",
                font=ctk.CTkFont(size=13),
                text_color="#424242",
                wraplength=250,
                justify="left"
            )
            opportunity_label.pack(anchor="w", padx=15, pady=3)
        
        ctk.CTkLabel(opportunities_frame, text="", height=10).pack()
    
    def _identify_strengths(self, videos: list, comments: list, viral_score: float) -> list:
        """Identify content strengths."""
        strengths = []
        
        if not videos:
            return ["C·∫ßn d·ªØ li·ªáu video ƒë·ªÉ ph√¢n t√≠ch"]
        
        # Calculate metrics
        avg_views = sum(v.get('view_count', 0) for v in videos) / len(videos)
        high_engagement_videos = [v for v in videos if v.get('view_count', 0) > 0 and 
                                 ((v.get('like_count', 0) + v.get('comment_count', 0)) / v.get('view_count', 0) * 100) > 3]
        
        if viral_score >= 70:
            strengths.append("N·ªôi dung c√≥ ti·ªÅm nƒÉng viral cao")
        if avg_views > 10000:
            strengths.append("Hi·ªáu su·∫•t l∆∞·ª£t xem m·∫°nh")
        if len(high_engagement_videos) > len(videos) * 0.3:
            strengths.append("T∆∞∆°ng t√°c kh√°n gi·∫£ t·ªët")
        if len(comments) > len(videos) * 10:
            strengths.append("T∆∞∆°ng t√°c c·ªông ƒë·ªìng t√≠ch c·ª±c")
        if len(videos) >= 10:
            strengths.append("T·∫°o n·ªôi dung nh·∫•t qu√°n")
        
        # Add more based on data
        positive_sentiment = sum(1 for c in comments if any(word in c.get('text', '').lower() 
                               for word in ['th√≠ch', 'tuy·ªát', 'hay', 't·ªët', 'love', 'great', 'amazing']))
        if positive_sentiment > len(comments) * 0.2:
            strengths.append("C·∫£m x√∫c kh√°n gi·∫£ t√≠ch c·ª±c")
        
        if not strengths:
            strengths = ["ƒêang x√¢y d·ª±ng n·ªÅn t·∫£ng n·ªôi dung", "Thu th·∫≠p insights kh√°n gi·∫£", "H·ªçc h·ªèi ƒë·ªông l·ª±c n·ªÅn t·∫£ng"]
        
        return strengths[:6]  # Max 6 strengths
    
    def _identify_opportunities(self, videos: list, comments: list, viral_score: float) -> list:
        """Identify improvement opportunities."""
        opportunities = []
        
        if not videos:
            return ["Thu th·∫≠p th√™m d·ªØ li·ªáu video ƒë·ªÉ ph√¢n t√≠ch"]
        
        # Calculate metrics for opportunities
        avg_views = sum(v.get('view_count', 0) for v in videos) / len(videos)
        avg_engagement = sum((v.get('like_count', 0) + v.get('comment_count', 0)) / v.get('view_count', 1) * 100 
                           for v in videos if v.get('view_count', 0) > 0) / len(videos) if videos else 0
        
        if viral_score < 50:
            opportunities.append("C·∫£i thi·ªán ti·ªÅm nƒÉng viral n·ªôi dung")
        if avg_engagement < 2:
            opportunities.append("TƒÉng t∆∞∆°ng t√°c kh√°n gi·∫£")
        if avg_views < 5000:
            opportunities.append("T·ªëi ∆∞u ƒë·ªÉ tƒÉng ƒë·ªô ph·ªß")
        if len(comments) < len(videos) * 5:
            opportunities.append("X√¢y d·ª±ng c·ªông ƒë·ªìng m·∫°nh h∆°n")
        
        if not opportunities:
            opportunities = ["M·ªü r·ªông ƒëa d·∫°ng n·ªôi dung", "T·ªëi ∆∞u l·ªãch ƒëƒÉng b√†i", "C·∫£i thi·ªán thumbnail v√† ti√™u ƒë·ªÅ"]
        
        return opportunities[:6]  # Max 6 opportunities
    
    def _create_recommendations(self, videos: list, comments: list, viral_score: float):
        """Create actionable recommendations section."""
        rec_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#F1F8E9", corner_radius=15)
        rec_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        rec_title = ctk.CTkLabel(
            rec_frame,
            text="üéØ KHUY·∫æN NGH·ªä C√ì TH·ªÇ TH·ª∞C HI·ªÜN",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#33691E"
        )
        rec_title.pack(pady=(20, 15))
        
        rec_content = ctk.CTkFrame(rec_frame, fg_color="white", corner_radius=10)
        rec_content.pack(fill="x", padx=25, pady=(0, 20))
        
        # Generate recommendations based on analysis
        recommendations = self._generate_recommendations(videos, comments, viral_score)
        
        for i, (category, rec_list) in enumerate(recommendations.items(), 1):
            # Category header
            cat_frame = ctk.CTkFrame(rec_content, fg_color="transparent")
            cat_frame.pack(fill="x", padx=20, pady=(15 if i > 1 else 10, 5))
            
            cat_label = ctk.CTkLabel(
                cat_frame,
                text=f"{i}. {category}",
                font=ctk.CTkFont(size=15, weight="bold"),
                text_color="#33691E"
            )
            cat_label.pack(anchor="w")
            
            # Recommendations
            for rec in rec_list:
                rec_frame_item = ctk.CTkFrame(rec_content, fg_color="transparent")
                rec_frame_item.pack(fill="x", padx=40, pady=2)
                
                rec_label = ctk.CTkLabel(
                    rec_frame_item,
                    text=f"‚Ä¢ {rec}",
                    font=ctk.CTkFont(size=13),
                    text_color="#424242",
                    wraplength=600,
                    justify="left"
                )
                rec_label.pack(anchor="w")
        
        ctk.CTkLabel(rec_content, text="", height=10).pack()
    
    def _generate_recommendations(self, videos: list, comments: list, viral_score: float) -> dict:
        """Generate actionable recommendations."""
        recommendations = {}
        
        # Content optimization
        content_recs = []
        if viral_score < 60:
            content_recs.extend([
                "Ph√¢n t√≠ch video hi·ªáu su·∫•t cao ƒë·ªÉ x√°c ƒë·ªãnh y·∫øu t·ªë th√†nh c√¥ng",
                "T·∫°o thumbnail h·∫•p d·∫´n h∆°n v·ªõi m√†u s·∫Øc s√°ng v√† text r√µ r√†ng",
                "C·∫£i thi·ªán hook video - l√†m cho 15 gi√¢y ƒë·∫ßu th√∫ v·ªã h∆°n"
            ])
        
        recommendations["T·ªëi ∆Øu N·ªôi Dung"] = content_recs[:3]
        
        # Audience engagement
        engagement_recs = [
            "Ph·∫£n h·ªìi b√¨nh lu·∫≠n trong v√†i gi·ªù ƒë·∫ßu sau khi ƒëƒÉng",
            "T·∫°o b√†i ƒëƒÉng c·ªông ƒë·ªìng ƒë·ªÉ duy tr√¨ t∆∞∆°ng t√°c gi·ªØa c√°c video",
            "S·ª≠ d·ª•ng poll v√† c√¢u h·ªèi trong tab c·ªông ƒë·ªìng"
        ]
        
        recommendations["T∆∞∆°ng T√°c Kh√°n Gi·∫£"] = engagement_recs[:3]
        
        # Growth strategy
        growth_recs = [
            "T·ªëi ∆∞u l·ªãch ƒëƒÉng d·ª±a tr√™n ho·∫°t ƒë·ªông kh√°n gi·∫£",
            "T·∫°o YouTube Shorts ƒë·ªÉ tƒÉng kh·∫£ nƒÉng ƒë∆∞·ª£c ph√°t hi·ªán",
            "H·ª£p t√°c v·ªõi creator c√πng lƒ©nh v·ª±c"
        ]
        
        recommendations["Chi·∫øn L∆∞·ª£c TƒÉng Tr∆∞·ªüng"] = growth_recs[:3]
        
        return recommendations
    
    def _create_detailed_breakdown(self, videos: list, comments: list, transcripts: list):
        """Create detailed video breakdown section."""
        breakdown_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#FAFAFA", corner_radius=15)
        breakdown_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        breakdown_title = ctk.CTkLabel(
            breakdown_frame,
            text="üìã PH√ÇN T√çCH CHI TI·∫æT VIDEO",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#424242"
        )
        breakdown_title.pack(pady=(20, 15))
        
        if not videos:
            no_videos_label = ctk.CTkLabel(
                breakdown_frame,
                text="Kh√¥ng c√≥ video ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt",
                font=ctk.CTkFont(size=14),
                text_color="#666666"
            )
            no_videos_label.pack(pady=20)
            return
        
        # Show pagination info
        total_videos = len(videos)
        show_count = min(10, total_videos)  # Show top 10
        
        pagination_label = ctk.CTkLabel(
            breakdown_frame,
            text=f"Hi·ªÉn th·ªã top {show_count} tr√™n {total_videos} video (T·ªëi ∆∞u hi·ªáu su·∫•t)",
            font=ctk.CTkFont(size=13),
            text_color="#666666"
        )
        pagination_label.pack(pady=(0, 15))
        
        # Video breakdown list
        breakdown_content = ctk.CTkFrame(breakdown_frame, fg_color="white", corner_radius=10)
        breakdown_content.pack(fill="x", padx=25, pady=(0, 20))
        
        # Sort by views and show top videos
        sorted_videos = sorted(videos, key=lambda x: x.get('view_count', 0), reverse=True)
        
        for i, video in enumerate(sorted_videos[:show_count], 1):
            self._create_video_breakdown_item(breakdown_content, i, video, comments, transcripts)
        
        # Show more button if needed
        if total_videos > show_count:
            more_label = ctk.CTkLabel(
                breakdown_frame,
                text=f"üîΩ {total_videos - show_count} video kh√°c c√≥ trong file ph√¢n t√≠ch ƒë√£ l∆∞u",
                font=ctk.CTkFont(size=13, weight="bold"),
                text_color="#2196F3"
            )
            more_label.pack(pady=(0, 20))
    
    def _create_video_breakdown_item(self, parent: ctk.CTkFrame, index: int, video: dict, 
                                   comments: list, transcripts: list):
        """Create individual video breakdown item."""
        video_frame = ctk.CTkFrame(parent, fg_color="#F8F9FA", corner_radius=8)
        video_frame.pack(fill="x", padx=15, pady=8)
        
        # Video header
        header_frame = ctk.CTkFrame(video_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=15, pady=(12, 8))
        
        # Index and title
        index_label = ctk.CTkLabel(
            header_frame,
            text=f"#{index}",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#FF6B35",
            width=35
        )
        index_label.pack(side="left")
        
        title_label = ctk.CTkLabel(
            header_frame,
            text=video.get('title', 'Kh√¥ng c√≥')[:70] + ("..." if len(video.get('title', '')) > 70 else ""),
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#212121",
            anchor="w"
        )
        title_label.pack(side="left", fill="x", expand=True, padx=(10, 0))
        
        # Metrics row
        metrics_frame = ctk.CTkFrame(video_frame, fg_color="transparent")
        metrics_frame.pack(fill="x", padx=15, pady=(0, 12))
        
        views = video.get('view_count', 0)
        likes = video.get('like_count', 0)
        video_comments = video.get('comment_count', 0)
        engagement = ((likes + video_comments) / views * 100) if views > 0 else 0
        
        metrics_text = f"üëÅÔ∏è {views:,}  ‚Ä¢  ‚ù§Ô∏è {likes:,}  ‚Ä¢  üí¨ {video_comments:,}  ‚Ä¢  üìä {engagement:.2f}%"
        
        metrics_label = ctk.CTkLabel(
            metrics_frame,
            text=metrics_text,
            font=ctk.CTkFont(size=12),
            text_color="#666666"
        )
        metrics_label.pack(anchor="w", padx=45)
    
    def _create_additional_requirements(self):
        """Create additional requirements section."""
        req_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="#FFF3E0", corner_radius=15)
        req_frame.pack(fill="x", padx=20, pady=(0, 25))
        
        req_title = ctk.CTkLabel(
            req_frame,
            text="üéØ Y√™u C·∫ßu Ph√¢n T√≠ch B·ªï Sung",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#E65100"
        )
        req_title.pack(pady=(20, 15))
        
        req_desc = ctk.CTkLabel(
            req_frame,
            text="Th√™m y√™u c·∫ßu c·ª• th·ªÉ cho ph√¢n t√≠ch AI ho·∫∑c insights t√πy ch·ªânh b·∫°n c·∫ßn:",
            font=ctk.CTkFont(size=14),
            text_color="#666666"
        )
        req_desc.pack(padx=25, pady=(0, 10))
        
        self.req_text = ctk.CTkTextbox(
            req_frame,
            height=120,
            font=ctk.CTkFont(size=13),
            fg_color="white",
            text_color="#424242",
            border_width=2,
            border_color="#E0E0E0"
        )
        self.req_text.pack(fill="x", padx=25, pady=(0, 25))
        self.req_text.insert("1.0", "Nh·∫≠p y√™u c·∫ßu b·ªï sung cho ph√¢n t√≠ch AI...")
    
    def _create_action_buttons(self):
        """Create action buttons section - Vietnamese version."""
        buttons_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(0, 30))
        
        # Left side - Load Previous Results button
        load_btn = ctk.CTkButton(
            buttons_frame,
            text="üìÅ T·∫£i K·∫øt Qu·∫£ C≈©",
            command=self._load_previous_results,
            fg_color="#9C27B0",
            hover_color="#7B1FA2",
            width=200,
            height=45,
            font=ctk.CTkFont(size=14, weight="bold"),
            corner_radius=10
        )
        load_btn.pack(side="left")
        
        # Right side - Create prompts button
        create_prompts_btn = ctk.CTkButton(
            buttons_frame,
            text="‚úèÔ∏è T·∫°o AI Prompts ‚Üí",
            command=self._on_create_prompts,
            fg_color="#FF6B35",
            hover_color="#E55100",
            width=220,
            height=55,
            font=ctk.CTkFont(size=16, weight="bold"),
            corner_radius=12
        )
        create_prompts_btn.pack(side="right")
    
    def _load_previous_results(self):
        """Load and display previous analysis results."""
        try:
            # Check if output/analysis directory exists
            analysis_dir = "output/analysis"
            if not os.path.exists(analysis_dir):
                messagebox.showinfo(
                    "Kh√¥ng C√≥ K·∫øt Qu·∫£ C≈©", 
                    "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch c≈©.\nCh·∫°y ph√¢n t√≠ch tr∆∞·ªõc ƒë·ªÉ l∆∞u k·∫øt qu·∫£."
                )
                return
            
            # Get all JSON files in analysis directory
            json_files = glob.glob(os.path.join(analysis_dir, "youtube_analysis_*.json"))
            
            if not json_files:
                messagebox.showinfo(
                    "Kh√¥ng C√≥ K·∫øt Qu·∫£ C≈©", 
                    "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch c≈©.\nCh·∫°y ph√¢n t√≠ch tr∆∞·ªõc ƒë·ªÉ l∆∞u k·∫øt qu·∫£."
                )
                return
            
            # Sort by modification time (newest first)
            json_files.sort(key=os.path.getmtime, reverse=True)
            
            # Create selection dialog
            self._show_file_selection_dialog(json_files)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ c≈©: {str(e)}")
    
    def _show_file_selection_dialog(self, json_files: list):
        """Show dialog to select which previous result to load."""
        # Create popup window
        popup = ctk.CTkToplevel(self.container)
        popup.title("T·∫£i K·∫øt Qu·∫£ C≈©")
        popup.geometry("600x400")
        popup.transient(self.container.winfo_toplevel())
        popup.grab_set()
        
        # Center the popup
        popup.update_idletasks()
        x = (popup.winfo_screenwidth() // 2) - (600 // 2)
        y = (popup.winfo_screenheight() // 2) - (400 // 2)
        popup.geometry(f"600x400+{x}+{y}")
        
        # Title
        title_label = ctk.CTkLabel(
            popup,
            text="üìÅ Ch·ªçn K·∫øt Qu·∫£ Ph√¢n T√≠ch C≈©",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#1565C0"
        )
        title_label.pack(pady=(20, 15))
        
        # Description
        desc_label = ctk.CTkLabel(
            popup,
            text="Ch·ªçn m·ªôt k·∫øt qu·∫£ ph√¢n t√≠ch ƒë·ªÉ xem:",
            font=ctk.CTkFont(size=14),
            text_color="#666666"
        )
        desc_label.pack(pady=(0, 20))
        
        # Scrollable frame for file list
        files_frame = ctk.CTkScrollableFrame(popup, fg_color="white")
        files_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Variable to store selected file
        selected_file = ctk.StringVar()
        
        # Create radio buttons for each file
        for i, file_path in enumerate(json_files[:20]):  # Limit to 20 most recent
            try:
                # Extract timestamp from filename
                filename = os.path.basename(file_path)
                timestamp_str = filename.replace("youtube_analysis_", "").replace(".json", "")
                
                # Parse timestamp
                timestamp = datetime.strptime(timestamp_str, "%Y%m%d_%H%M%S")
                display_time = timestamp.strftime("%d/%m/%Y %H:%M:%S")
                
                # Get file size
                file_size = os.path.getsize(file_path)
                size_kb = file_size / 1024
                
                # Create radio button
                radio_frame = ctk.CTkFrame(files_frame, fg_color="#F5F5F5", corner_radius=8)
                radio_frame.pack(fill="x", pady=5)
                
                radio_btn = ctk.CTkRadioButton(
                    radio_frame,
                    text=f"Ph√¢n t√≠ch t·ª´ {display_time} ({size_kb:.1f} KB)",
                    variable=selected_file,
                    value=file_path,
                    font=ctk.CTkFont(size=13),
                    text_color="#424242"
                )
                radio_btn.pack(anchor="w", padx=15, pady=10)
                
                # Select first item by default
                if i == 0:
                    selected_file.set(file_path)
                    
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")
                continue
        
        # Buttons frame
        buttons_frame = ctk.CTkFrame(popup, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Cancel button
        cancel_btn = ctk.CTkButton(
            buttons_frame,
            text="H·ªßy",
            command=popup.destroy,
            fg_color="#757575",
            hover_color="#616161",
            width=100,
            height=35
        )
        cancel_btn.pack(side="left")
        
        # Load button
        load_btn = ctk.CTkButton(
            buttons_frame,
            text="T·∫£i ƒê√£ Ch·ªçn",
            command=lambda: self._load_selected_file(selected_file.get(), popup),
            fg_color="#2196F3",
            hover_color="#1976D2",
            width=120,
            height=35
        )
        load_btn.pack(side="right")
    
    def _load_selected_file(self, file_path: str, popup):
        """Load the selected analysis file."""
        try:
            if not file_path:
                messagebox.showwarning("Kh√¥ng C√≥ L·ª±a Ch·ªçn", "Vui l√≤ng ch·ªçn file ƒë·ªÉ t·∫£i.")
                return
            
            # Load JSON file
            with open(file_path, 'r', encoding='utf-8') as f:
                saved_data = json.load(f)
            
            # Extract analysis results
            analysis_results = saved_data.get('analysis_results', saved_data)
            
            # Close popup
            popup.destroy()
            
            # Display the loaded results
            self.show_results(analysis_results)
            
            # Show success message
            filename = os.path.basename(file_path)
            messagebox.showinfo(
                "Th√†nh C√¥ng", 
                f"ƒê√£ t·∫£i th√†nh c√¥ng k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´:\n{filename}"
            )
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i file ph√¢n t√≠ch: {str(e)}")
    
    def _on_create_prompts(self):
        """Handle create prompts button click."""
        # Save additional requirements
        self.additional_requirements = self.req_text.get("1.0", "end-1c").strip()
        if self.additional_requirements == "Nh·∫≠p y√™u c·∫ßu b·ªï sung cho ph√¢n t√≠ch AI...":
            self.additional_requirements = ""
        
        # Call the callback
        self.create_prompts_callback()
    
    def update_progress(self, progress_data: Dict):
        """Update progress display."""
        # Update progress bar
        if 'progress' in progress_data:
            self.progress_bar.set(progress_data['progress'] / 100)
        
        # Update labels
        if 'time_elapsed' in progress_data:
            self.time_label.configure(text=f"‚è±Ô∏è Th·ªùi gian ƒë√£ qua: {progress_data['time_elapsed']}")
        
        if 'videos_analyzed' in progress_data:
            self.videos_label.configure(text=f"üìπ Video ƒë√£ ph√¢n t√≠ch: {progress_data['videos_analyzed']}")
        
        if 'comments_collected' in progress_data:
            self.comments_label.configure(text=f"üí¨ B√¨nh lu·∫≠n ƒë√£ thu th·∫≠p: {progress_data['comments_collected']}")
        
        if 'transcripts_collected' in progress_data:
            self.transcripts_label.configure(text=f"üìÑ Ph·ª• ƒë·ªÅ ƒë√£ tr√≠ch xu·∫•t: {progress_data['transcripts_collected']}")
        
        if 'current_task' in progress_data:
            self.task_label.configure(text=f"üéØ T√°c v·ª• hi·ªán t·∫°i: {progress_data['current_task']}")
    
    def on_complete(self, result_data: Dict):
        """Handle analysis completion."""
        print(f"DEBUG on_complete - result_data keys: {result_data.keys()}")
        print(f"DEBUG on_complete - status: {result_data.get('status')}")
        
        if result_data.get('status') == 'success':
            self.show_results(result_data)
        else:
            # Show error
            self.progress_bar.configure(progress_color="#F44336")
            self.task_label.configure(
                text=f"‚ùå L·ªói: {result_data.get('error', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}",
                text_color="#F44336"
            )
    
    def show(self):
        """Show the tab."""
        self.container.pack(fill="both", expand=True)
    
    def hide(self):
        """Hide the tab."""
        self.container.pack_forget()