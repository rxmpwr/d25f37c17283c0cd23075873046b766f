# youtube_strategy_display.py
"""
YouTube Strategy Display - Hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn k√™nh YouTube
"""

import customtkinter as ctk
from tkinter import messagebox
import json
from datetime import datetime


class YouTubeStrategyDisplay:
    """Class ƒë·ªÉ hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn k√™nh YouTube."""
    
    @staticmethod
    def get_full_strategy_content():
        """Tr·∫£ v·ªÅ n·ªôi dung chi·∫øn l∆∞·ª£c ƒë·∫ßy ƒë·ªß."""
        return {
            "title": "üöÄ Chi·∫øn l∆∞·ª£c ƒë·ªÉ ph√°t tri·ªÉn k√™nh Youtube cho b·∫°n",
            "sections": [
                {
                    "title": "**1. T·ªëi ∆∞u n·ªôi dung video:**",
                    "items": [
                        "- **Thumbnail h·∫•p d·∫´n:** S·ª≠ d·ª•ng m√†u s·∫Øc n·ªïi b·∫≠t, khu√¥n m·∫∑t c√≥ c·∫£m x√∫c m·∫°nh, text overlay r√µ r√†ng v√† t·∫°o t√≤ m√≤.",
                        "- **Title viral:** S·ª≠ d·ª•ng con s·ªë c·ª• th·ªÉ, t·ª´ kh√≥a m·∫°nh nh∆∞ 'B√≠ m·∫≠t', 'S·ªëc', 'Kh√¥ng ng·ªù', ƒë·∫∑t c√¢u h·ªèi k√≠ch th√≠ch t√≤ m√≤."
                    ]
                },
                {
                    "title": "**2. Chi·∫øn l∆∞·ª£c SEO Youtube:**",
                    "items": [
                        "- **Keyword research:** S·ª≠ d·ª•ng YouTube Search Suggest, Google Trends, v√† TubeBuddy ƒë·ªÉ t√¨m t·ª´ kh√≥a c√≥ search volume cao.",
                        "- **C√°ch vi·∫øt description:** Vi·∫øt m√¥ t·∫£ chi ti·∫øt, h·∫•p d·∫´n v√† ch·ª©a t·ª´ kh√≥a ch√≠nh, gi√∫p c·∫£i thi·ªán kh·∫£ nƒÉng t√¨m ki·∫øm v√† Click-through Rate (CTR).",
                        "- **Tags hi·ªáu qu·∫£:** S·ª≠ d·ª•ng tags li√™n quan, h·ª£p l√Ω v√† ph√¢n ·∫£nh n·ªôi dung video ƒë·ªÉ tƒÉng kh·∫£ nƒÉng xu·∫•t hi·ªán tr√™n YouTube Search."
                    ]
                },
                {
                    "title": "**3. Visual Branding (Nh·∫≠n di·ªán th∆∞∆°ng hi·ªáu):**",
                    "items": [
                        "- **M√†u s·∫Øc ch·ªß ƒë·∫°o:** Ch·ªçn 2-3 m√†u ch√≠nh ph√π h·ª£p v·ªõi personality c·ªßa k√™nh (VD: xanh d∆∞∆°ng cho c√¥ng ngh·ªá, cam cho nƒÉng l∆∞·ª£ng).",
                        "- **Font ch·ªØ chu·∫©n:** S·ª≠ d·ª•ng 1-2 font d·ªÖ ƒë·ªçc tr√™n thumbnail (Sans-serif nh∆∞ Arial, Helvetica cho hi·ªán ƒë·∫°i, ho·∫∑c bold fonts cho impact).",
                        "- **Layout thumbnail template:** T·∫°o 3-4 m·∫´u layout c·ªë ƒë·ªãnh (face + text, split screen, before/after) ƒë·ªÉ kh√°n gi·∫£ d·ªÖ nh·∫≠n di·ªán.",
                        "- **Logo/Watermark:** ƒê·∫∑t logo nh·ªè g√≥c ph·∫£i d∆∞·ªõi, opacity 70% ƒë·ªÉ kh√¥ng che n·ªôi dung nh∆∞ng v·∫´n brand recognition.",
                        "- **Color grading:** √Åp d·ª•ng LUT/filter nh·∫•t qu√°n cho t·∫•t c·∫£ video t·∫°o visual signature ri√™ng.",
                        "- **Intro/Outro:** Intro max 3-5 gi√¢y v·ªõi animation logo, outro 10-15 gi√¢y v·ªõi end screen elements."
                    ]
                },
                {
                    "title": "**4. Chi·∫øn l∆∞·ª£c thu h√∫t v√† gi·ªØ ch√¢n kh√°n gi·∫£:**",
                    "items": [
                        "- **Hook m·∫°nh trong 5s ƒë·∫ßu:** B·∫Øt ƒë·∫ßu video b·∫±ng c√¢u h·ªèi ho·∫∑c t√¨nh hu·ªëng g√¢y t√≤ m√≤, thu h√∫t ng∆∞·ªùi xem t·ª´ ƒë·∫ßu.",
                        "- **C√°ch gi·ªØ retention rate cao:** ƒê·∫£m b·∫£o n·ªôi dung h·∫•p d·∫´n, t∆∞∆°ng t√°c v·ªõi kh√°n gi·∫£, v√† gi·ªØ ch√¢n h·ªç b·∫±ng vi·ªác cung c·∫•p th√¥ng tin gi√° tr·ªã li√™n t·ª•c.",
                        "- **Call-to-action hi·ªáu qu·∫£:** S·ª≠ d·ª•ng c√°c CTAs nh∆∞ 'Subscribe for more insights', 'Leave a comment with your thoughts', 'Share with someone who needs this' ƒë·ªÉ khuy·∫øn kh√≠ch h√†nh ƒë·ªông t·ª´ kh√°n gi·∫£."
                    ]
                },
                {
                    "title": "**5. C√°ch s·ª≠ d·ª•ng Shorts & Trends:**",
                    "items": [
                        "- **Lo·∫°i content ph√π h·ª£p Shorts:** T·∫°o shorts t·ª´ nh·ªØng ƒëo·∫°n n·ªïi b·∫≠t trong video d√†i, ho·∫∑c t·∫≠p trung v√†o nh·ªØng ch·ªß ƒë·ªÅ ng·∫Øn g·ªçn, g√¢y ch√∫ √Ω.",
                        "- **C√°ch catch trends nhanh:** Theo d√µi xu h∆∞·ªõng v√† s·ª± ki·ªán n√≥ng h·ªïi ƒë·ªÉ t·∫°o n·ªôi dung ph·∫£n ·∫£nh v√† tham gia v√†o c√°c trends.",
                        "- **T·ª∑ l·ªá Shorts/Long-form:** Th·ª≠ nghi·ªám v·ªõi t·ª∑ l·ªá Shorts v√† Long-form ƒë·ªÉ xem x√©t ph·∫£n h·ªìi t·ª´ kh√°n gi·∫£ v√† hi·ªáu qu·∫£ tr√™n k√™nh."
                    ]
                },
                {
                    "title": "**6. Process nghi√™n c·ª©u & ch·ªçn ch·ªß ƒë·ªÅ:**",
                    "items": [
                        "- **Weekly Research Process:** M·ªói th·ª© 2 d√†nh 2h cho keyword research v·ªõi TubeBuddy/VidIQ + YouTube Analytics.",
                        "- **Content Mining t·ª´ Comments:** Review top 50 comments m·ªói tu·∫ßn, t√¨m c√¢u h·ªèi l·∫∑p l·∫°i ‚Üí t·∫°o video response.",
                        "- **Trending Topic Monitoring:** Set Google Alerts cho niche keywords, check YouTube Trending daily, follow 5-10 channels c√πng niche.",
                        "- **Topic Validation Checklist:** Search volume >1000/th√°ng? Competition score <70? Relevant v·ªõi audience? C√≥ unique angle?",
                        "- **Content Calendar Planning:** Plan 1 th√°ng ahead v·ªõi 40% evergreen + 40% trending + 20% experimental content."
                    ]
                },
                {
                    "title": "**7. Chi·∫øn l∆∞·ª£c tƒÉng t∆∞∆°ng t√°c:**",
                    "items": [
                        "- **K·ªπ thu·∫≠t tƒÉng comments:** Khuy·∫øn kh√≠ch kh√°n gi·∫£ b√¨nh lu·∫≠n b·∫±ng c√°ch ƒë·∫∑t c√¢u h·ªèi, tr·∫£ l·ªùi c√°c c√¢u h·ªèi, v√† t∆∞∆°ng t√°c t√≠ch c·ª±c v·ªõi b√¨nh lu·∫≠n.",
                        "- **C√°ch encourage likes & shares:** Y√™u c·∫ßu kh√°n gi·∫£ like n·∫øu h·ªç th·∫•y video h·ªØu √≠ch, v√† chia s·∫ª n·∫øu h·ªç nghƒ© n·ªôi dung c√≥ th·ªÉ gi√∫p ng∆∞·ªùi kh√°c.",
                        "- **Community engagement:** Tham gia v√†o c·ªông ƒë·ªìng, t∆∞∆°ng t√°c v·ªõi fan tr√™n c√°c n·ªÅn t·∫£ng kh√°c nh∆∞ Facebook, Instagram ƒë·ªÉ x√¢y d·ª±ng m·ªëi quan h·ªá t·ªët v·ªõi kh√°n gi·∫£."
                    ]
                },
                {
                    "title": "**8. Script & Storytelling Framework:**",
                    "items": [
                        "- **Hook Formula (5s ƒë·∫ßu):** 'B·∫°n c√≥ bi·∫øt [shocking fact]?' ho·∫∑c 'H√¥m nay t√¥i s·∫Ω reveal [benefit] ch·ªâ trong [time]'",
                        "- **Story Structure:** Problem (30s) ‚Üí Agitation (1min) ‚Üí Solution (3-5min) ‚Üí Transformation (1min) ‚Üí CTA (30s)",
                        "- **Script Template:** Conversational tone v·ªõi 'b·∫°n/m√¨nh', short sentences, personal anecdotes m·ªói 2-3 ph√∫t.",
                        "- **Transition Phrases:** 'Nh∆∞ng ƒë√≥ ch∆∞a ph·∫£i t·∫•t c·∫£...', 'ƒêi·ªÅu th√∫ v·ªã l√†...', 'V√† ƒë√¢y m·ªõi l√† ph·∫ßn quan tr·ªçng nh·∫•t...'",
                        "- **Cliffhangers:** Teaser ·ªü ƒë·∫ßu video, mini-hooks m·ªói 2 ph√∫t, end screen teasing next video."
                    ]
                },
                {
                    "title": "**9. KPIs v√† M·ª•c ti√™u c·ª• th·ªÉ:**",
                    "items": [
                        "- **Subscriber Growth:** Target +500-1000 subs/th√°ng trong 3 th√°ng ƒë·∫ßu, +2000/th√°ng sau 6 th√°ng.",
                        "- **View Metrics:** Average View Duration >50% cho 10-min videos, >40% cho 15-min videos.",
                        "- **CTR Target:** Thumbnail CTR >8% trong 48h ƒë·∫ßu, overall CTR >5%.",
                        "- **Engagement Rate:** (Likes + Comments) / Views >6%, Comment rate >0.5%.",
                        "- **Watch Time:** 4000 hours trong 90 ng√†y ƒë·∫ßu, sau ƒë√≥ +2000 hours/th√°ng.",
                        "- **Revenue Goals:** RPM $2-5 cho niche gi√°o d·ª•c, CPM $4-8 cho entertainment."
                    ]
                },
                {
                    "title": "**10. Chi·∫øn l∆∞·ª£c thu h√∫t fan trung th√†nh:**",
                    "items": [
                        "- **Community building:** T·∫°o ra kh√¥ng gian giao l∆∞u, th·∫£o lu·∫≠n cho c·ªông ƒë·ªìng kh√°n gi·∫£, c√≥ th·ªÉ qua livestreams, Q&A sessions, ho·∫∑c Facebook Groups.",
                        "- **Exclusive content:** Cung c·∫•p n·ªôi dung ƒë·ªôc quy·ªÅn cho fan trung th√†nh, nh∆∞ behind-the-scenes, sneak peeks, ho·∫∑c b√†i gi·∫£ng ng·∫Øn."
                    ]
                },
                {
                    "title": "**11. Timeline tri·ªÉn khai 3-6 th√°ng:**",
                    "items": [
                        "- **Th√°ng 1 (Foundation):** Test 3-4 content formats, establish visual branding, setup analytics tracking.",
                        "- **Tu·∫ßn 1-2:** Research phase - analyze top 20 competitors, identify content gaps, create channel art/logo.",
                        "- **Tu·∫ßn 3-4:** Production sprint - create 8 videos (4 different formats), A/B test thumbnails.",
                        "- **Th√°ng 2 (Optimization):** Double down on best performing format, refine SEO strategy, start community building.",
                        "- **Tu·∫ßn 5-6:** Analyze metrics, identify winning format (highest retention + CTR), optimize based on data.",
                        "- **Tu·∫ßn 7-8:** Scale production of winning format, implement viewer feedback, test Shorts strategy.",
                        "- **Th√°ng 3-4 (Growth):** Increase posting frequency, collaborate v·ªõi creators, launch email list.",
                        "- **Th√°ng 5-6 (Monetization):** Diversify revenue streams, launch products/services, explore sponsorships.",
                        "- **Milestones:** M1: 1K subs, M3: 10K subs + 4K watch hours, M6: 25K subs + monetization enabled."
                    ]
                }
            ]
        }
    
    @staticmethod
    def create_strategy_display(parent_frame):
        """T·∫°o widget hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c."""
        # Main container
        container = ctk.CTkFrame(parent_frame, fg_color="white")
        
        # Header
        header_frame = ctk.CTkFrame(container, fg_color="white")
        header_frame.pack(fill="x", padx=40, pady=(30, 20))
        
        strategy_content = YouTubeStrategyDisplay.get_full_strategy_content()
        
        # Title
        title_label = ctk.CTkLabel(
            header_frame,
            text=strategy_content["title"],
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#2B2B2B"
        )
        title_label.pack()
        
        # Scrollable content
        content_frame = ctk.CTkScrollableFrame(
            container,
            fg_color="#F8FFF8",
            scrollbar_button_color="#E0E0E0",
            corner_radius=15
        )
        content_frame.pack(fill="both", expand=True, padx=40, pady=(0, 30))
        
        # Display sections
        for section in strategy_content["sections"]:
            # Section title
            section_title = ctk.CTkLabel(
                content_frame,
                text=section["title"],
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#2B2B2B",
                anchor="w"
            )
            section_title.pack(fill="x", padx=30, pady=(20, 10))
            
            # Section items
            for item in section["items"]:
                item_label = ctk.CTkLabel(
                    content_frame,
                    text=item,
                    font=ctk.CTkFont(size=13),
                    text_color="#444444",
                    anchor="w",
                    justify="left",
                    wraplength=900
                )
                item_label.pack(fill="x", padx=(50, 30), pady=3)
        
        # Export button
        export_frame = ctk.CTkFrame(container, fg_color="white")
        export_frame.pack(fill="x", padx=40, pady=(20, 30))
        
        export_btn = ctk.CTkButton(
            export_frame,
            text="üì• Xu·∫•t Chi·∫øn L∆∞·ª£c",
            command=lambda: YouTubeStrategyDisplay.export_strategy(strategy_content),
            fg_color="#2196F3",
            hover_color="#1976D2",
            height=45,
            width=200
        )
        export_btn.pack()
        
        return container
    
    @staticmethod
    def export_strategy(strategy_content):
        """Export chi·∫øn l∆∞·ª£c ra file."""
        from tkinter import filedialog
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[
                ("Text files", "*.txt"),
                ("Markdown files", "*.md"),
                ("All files", "*.*")
            ],
            initialfile=f"youtube_strategy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(strategy_content["title"] + "\n")
                    f.write("=" * 60 + "\n\n")
                    
                    for section in strategy_content["sections"]:
                        f.write(section["title"] + "\n")
                        for item in section["items"]:
                            f.write(item + "\n")
                        f.write("\n")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t chi·∫øn l∆∞·ª£c ra file:\n{filename}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {str(e)}")


# Tab Manager cho Strategy
class StrategyTabManager:
    """Tab manager ƒë·ªÉ hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c YouTube."""
    
    def __init__(self, parent_frame):
        self.parent_frame = parent_frame
        self.container = YouTubeStrategyDisplay.create_strategy_display(parent_frame)
        
    def show(self):
        """Show the tab."""
        self.container.pack(fill="both", expand=True)
        
    def hide(self):
        """Hide the tab."""
        self.container.pack_forget()